<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0">
  <file src="src/Cache/Configuration/CachedConfigurationLoader.php">
    <MixedArgument>
      <code><![CDATA[require $cache->getPath()]]></code>
    </MixedArgument>
    <UnresolvableInclude>
      <code><![CDATA[require $cache->getPath()]]></code>
    </UnresolvableInclude>
  </file>
  <file src="src/Cache/RouteMetadata/AttributeMetadataProvider.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$method]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Cache/RouteMetadata/YamlMetadataProvider.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->buildRouteParam(...)]]></code>
      <code><![CDATA[(array) $value]]></code>
      <code><![CDATA[(array) $value]]></code>
      <code><![CDATA[(array) $value]]></code>
      <code><![CDATA[(array) $value]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$value]]></code>
    </InvalidArgument>
    <PossiblyInvalidArgument>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[(array) $value]]></code>
      <code><![CDATA[(array) $value]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Command/DebugCommand.php">
    <InvalidArgument>
      <code><![CDATA[$params]]></code>
    </InvalidArgument>
    <TypeDoesNotContainType>
      <code><![CDATA[Kernel::MAJOR_VERSION === 6]]></code>
      <code><![CDATA[Kernel::MAJOR_VERSION === 6]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/DependencyInjection/PurgatoryExtension.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[static function (ChildDefinition $definition, AsExpressionLanguageFunction $attribute, \ReflectionClass|\ReflectionMethod $reflection): void {
                $definition->addTag(
                    name: 'purgatory.expression_language_function',
                    attributes: [
                        'function' => $attribute->functionName,
                        'method' => $reflection instanceof \ReflectionMethod
                            ? $reflection->name
                            : ($reflection->hasMethod('__invoke') ? '__invoke'
                                : throw new RuntimeException(\sprintf('Invalid expression language function, the method "%s::__invoke()" does not exist.', $reflection->name))),
                    ],
                );
            }]]></code>
      <code><![CDATA[static function (ChildDefinition $definition, AsRouteParamService $attribute, \ReflectionClass|\ReflectionMethod $reflection): void {
                $definition->addTag(
                    name: 'purgatory.route_parameter_service',
                    attributes: [
                        'alias' => $attribute->alias,
                        'method' => $reflection instanceof \ReflectionMethod
                            ? $reflection->name
                            : ($reflection->hasMethod('__invoke') ? '__invoke'
                                : throw new RuntimeException(\sprintf('Invalid route parameter service, the method "%s::__invoke()" does not exist.', $reflection->name))),
                    ],
                );
            }]]></code>
      <code><![CDATA[static function (ChildDefinition $definition, PurgeOn $attribute, \ReflectionClass|\ReflectionMethod $reflection): void {
                $definition->addTag(
                    name: 'purgatory.purge_on',
                    attributes: [
                        'class' => $reflection instanceof \ReflectionMethod ? $reflection->class : $reflection->name,
                    ],
                );
            }]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Doctrine/DBAL/PurgatoryConnection.php">
    <DuplicateClass>
      <code><![CDATA[PurgatoryConnection]]></code>
    </DuplicateClass>
  </file>
</files>
